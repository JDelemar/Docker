# default nginx apline /etc/nginx/nginx.conf 
user  nginx;
worker_processes  1; # typically the number of CPUs

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    ##
    # Basic Settings
    ##

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    ##
    # Logging Settings
    ##

    access_log  /var/log/nginx/access.log  main;
    error_log /var/log/nginx/error.log;

    ##
    # Gzip Settings 
    ##

    gzip  on;
    gzip_disable "msie6";

    ##
    # Virtual Host Configs
    ##
    
    #include /etc/nginx/conf.d/*.conf; # works with just this line 
    #include /etc/nginx/sites-enabled/*;

    # source: https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-16-04
    # HTTP - redirect all requests to HTTPS:
    server {
        listen 80;
        listen [::]:80 default_server ipv6only=on;
        return 301 https://$host$request_uri;
    }

    # HTTPS - proxy request on to local Node.js app:
    server {
        # listen 443;
        listen 443 ssl http2;
        server_name _; # default server name - could use localhost - this allows hostname to be *

        ssl on;
        # certificate and key - TODO: get from Let's Encrypt
        ssl_certificate /etc/ssl/private/cert.pem;
        ssl_certificate_key /etc/ssl/private/key.pem;
        ssl_session_timeout 5m;
        # ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

        ssl_protocols TLSv1.2;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # pass requests for / to testnode1:8000:
        location / {
                # use host name
                proxy_pass http://testnode1;
        }
        
        # # one-IP, many subfolder approach
        # # source: https://askubuntu.com/questions/766352/multiple-websites-on-nginx-one-ip
        # # pass requests for / to testnode2:8001:
        # location /site2/ {
        #         proxy_pass https://localhost:8001/;
        # }
        
    }

    # one-IP, multiple subdomain approach
    server {
        # listen 443;
        listen 443 ssl http2;
        server_name site2.local.com; # default server name - could use localhost - this specifies site2.local.com as hostname

        ssl on;
        # certificate and key - TODO: get from Let's Encrypt
        ssl_certificate /etc/ssl/private/cert.pem;
        ssl_certificate_key /etc/ssl/private/key.pem;
        ssl_session_timeout 5m;
        # ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

        ssl_protocols TLSv1.2;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;

        # pass requests for / to testnode2:8001:
        location / {
                # use host name
                proxy_pass http://testnode2;
        }        
    }
}

# for mail see sample authentication script at:
# http://wiki.nginx.org/ImapAuthenticationWithApachePhpScript


# original nginx.conf from nginx:1.11.10-apline
# server {
#     listen       80;
#     server_name  localhost;

#     #charset koi8-r;
#     #access_log  /var/log/nginx/log/host.access.log  main;

#     location / {
#         root   /usr/share/nginx/html;
#         index  index.html index.htm;
#     }

#     #error_page  404              /404.html;

#     # redirect server error pages to the static page /50x.html
#     #
#     error_page   500 502 503 504  /50x.html;
#     location = /50x.html {
#         root   /usr/share/nginx/html;
#     }

#     # proxy the PHP scripts to Apache listening on 127.0.0.1:80
#     #
#     #location ~ \.php$ {
#     #    proxy_pass   http://127.0.0.1;
#     #}

#     # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
#     #
#     #location ~ \.php$ {
#     #    root           html;
#     #    fastcgi_pass   127.0.0.1:9000;
#     #    fastcgi_index  index.php;
#     #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
#     #    include        fastcgi_params;
#     #}

#     # deny access to .htaccess files, if Apache's document root
#     # concurs with nginx's one
#     #
#     #location ~ /\.ht {
#     #    deny  all;
#     #}
# }
